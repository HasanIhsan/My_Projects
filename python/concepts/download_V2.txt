import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from pytube import YouTube
from moviepy.video.io.VideoFileClip import VideoFileClip
import os

def choose_directory():
    download_directory.set(filedialog.askdirectory())

def choose_file():
    file_path = filedialog.askopenfilename()
    with open(file_path, "r") as f:
        urls = f.readlines()
        url_entry.delete("1.0", tk.END)
        url_entry.insert(tk.END, "\n".join(urls))

def download():
    video_urls = url_entry.get("1.0", tk.END).splitlines()
    for video_url in video_urls:
        yt = YouTube(video_url.strip(), on_progress_callback=show_progress)
        if file_type.get() == "mp3":
            stream = yt.streams.filter(only_audio=True).first()
            out_file = stream.download(output_path=download_directory.get())
            base, ext = os.path.splitext(out_file)
            new_file = base + '.mp3'
            os.rename(out_file, new_file)
        elif file_type.get() == "mp4":
            stream = yt.streams.first()
            out_file = stream.download(output_path=download_directory.get())
            status_label.config(text="Converting to MP4...")
            clip = VideoFileClip(out_file)
            clip.write_videofile(os.path.splitext(out_file)[0] + ".mp4")
            clip.close()
            os.remove(out_file)
        status_label.config(text="Download complete!")
        progress_label.config(text="")
        progress_bar['value'] = 0

def show_progress(stream, chunk, bytes_remaining):
    size = stream.filesize
    downloaded = size - bytes_remaining
    percentage = (downloaded / size) * 100
    progress_label.config(text="Downloading...{:.1f}%".format(percentage))
    progress_bar['value'] = percentage
    root.update() # update the GUI


root = tk.Tk()
root.title("YouTube Downloader")
root.geometry("800x500")
root.resizable(False, False)
root.configure(bg="white")

# Create GUI elements
url_label = tk.Label(root, text="Video URLs (one per line) or choose a file:", font=("Helvetica", 14), fg="black", bg="white")
url_label.pack(pady=(20, 5), padx=10, anchor="w")
url_entry = tk.Text(root, height=5, width=50, font=("Helvetica", 12))
url_entry.pack(padx=10, pady=5)

file_frame = tk.Frame(root, bg="white")
file_frame.pack(pady=5, padx=10, anchor="w")

file_button = tk.Button(file_frame, text="Choose file", font=("Helvetica", 10), bg="#008CBA", fg="black", activebackground="#008CBA", activeforeground="white", relief="flat", command=choose_file)
file_button.pack(side="left", padx=(0, 10))

file_type_label = tk.Label(file_frame, text="File type:", font=("Helvetica", 14), fg="black", bg="white")
file_type_label.pack(side="left")

file_type = ttk.Combobox(root, values=["mp3", "mp4"], font=("Helvetica", 12))
file_type.current(0)
file_type.pack(pady=5, padx=10, anchor="w")

directory_label = tk.Label(root, text="Download directory:", font=("Helvetica", 14), fg="black", bg="white")
directory_label.pack(pady=5, padx=10, anchor="w")

download_directory = tk.StringVar()
download_directory.set(os.getcwd())

directory_frame = tk.Frame(root, bg="white")
directory_frame.pack(pady=5, padx=10, anchor="w")

directory_entry = tk.Entry(directory_frame, textvariable=download_directory, font=("Helvetica", 12))
directory_entry.pack(side="left")

directory_button = tk.Button(directory_frame, text="Choose directory", font=("Helvetica", 10), bg="#008CBA", fg="black", activebackground="#008CBA", activeforeground="white", relief="flat", command=choose_directory)
directory_button.pack(side="left", padx=(10, 0))

download_button = tk.Button(root, text="Download", font=("Helvetica", 16), bg="#008CBA", fg="black", activebackground="#008CBA", activeforeground="white", relief="flat", command=download)
download_button.pack(pady=(20, 5))

status_label = tk.Label(root, text="", font=("Helvetica", 14), fg="black", bg="white")
status_label.pack(pady=5)

progress_label = tk.Label(root, text="", font=("Helvetica", 12), fg="black", bg="white")
progress_label.pack(pady=5)

progress_bar = ttk.Progressbar(root, orient="horizontal", length=300, mode="determinate")
progress_bar.pack(pady=(0, 20))

root.mainloop()
